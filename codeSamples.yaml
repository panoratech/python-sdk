overlay: 1.0.0
info:
  title: CodeSamples overlay for python target
  version: 0.0.0
actions:
  - target: $["paths"]["/webhooks/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateStatus
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.update_status(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingCollections
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.collections.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmEngagements
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/passthrough/{retryId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRetriedRequestResponse
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.passthrough.retryid.get_retried_request_response(retry_id="<value>")

            # Use the SDK ...
  - target: $["paths"]["/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisGroups
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.groups.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/interviews"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsInterview
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.interviews.create(x_connection_token="<value>", unified_ats_interview_input={
                "status": "SCHEDULED",
                "application_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "job_interview_stage_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "organized_by": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "interviewers": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "location": "San Francisco",
                "start_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "end_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_updated_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/activities"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsActivity
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.activities.create(x_connection_token="<value>", unified_ats_activity_input={
                "activity_type": "NOTE",
                "subject": "Email subject",
                "body": "Dear Diana, I love you",
                "visibility": "PUBLIC",
                "candidate_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/companyinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingCompanyInfo
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.companyinfos.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/sync/resync"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: resync
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.sync.resync()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/events/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationEvent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.events.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/trackingcategories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingTrackingCategory
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.trackingcategories.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/emails/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationEmail
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.emails.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsAttachment
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.attachments.create(x_connection_token="<value>", unified_ats_attachment_input={
                "file_url": "https://example.com/file.pdf",
                "file_name": "file.pdf",
                "attachment_type": "RESUME",
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_modified_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "candidate_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ecommerce/orders"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listEcommerceOrders
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.accounts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/sync/pull-frequencies"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: updatePullFrequency
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.sync.update_pull_frequency(request={
                "crm": 1800,
                "ats": 3600,
                "hris": 7200,
                "accounting": 14400,
                "filestorage": 28800,
                "ecommerce": 43200,
                "ticketing": 86400,
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timesheetentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisTimesheetentry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timesheetentries.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsDepartments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.departments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/trackingcategories"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingTrackingCategorys
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.trackingcategories.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employees.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/companyinfos"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingCompanyInfos
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.companyinfos.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/filestorage/groups"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.groups.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.create(x_connection_token="<value>", unified_ticketing_comment_input={
                "body": "Assigned to Eric !",
                "html_body": "<p>Assigned to Eric !</p>",
                "is_private": False,
                "creator_type": "USER",
                "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.users.retrieve(x_connection_token="<value>", id="b008e199-eda9-4629-bd41-a01b6195864a", remote_data=True)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/folders"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.create(x_connection_token="<value>", unified_filestorage_folder_input={
                "name": "school",
                "size": "2048",
                "folder_url": "https://example.com/school",
                "description": "All things school related",
                "drive_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "parent_folder_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "shared_link": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "permission": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/linked_users"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.create(request={
                "linked_user_origin_id": "id_1",
                "alias": "acme",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/phonenumbers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.phonenumbers.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.create(x_connection_token="<value>", unified_marketingautomation_contact_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/emails"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationEmails
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.emails.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employerbenefits"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployerBenefits
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employerbenefits.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/invoices"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/vendorcredits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.vendorcredits.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.create(x_connection_token="<value>", unified_crm_deal_input={
                "name": "Huge Contract with Acme",
                "description": "Contract with Sales Operations Team",
                "amount": 1000,
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "stage_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/messages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationMessage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.messages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/sync/pull-frequencies"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPullFrequency
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.sync.get_pull_frequency()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisLocations
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.locations.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/creditnotes"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.creditnotes.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingTeams
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.teams.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.create(x_connection_token="<value>", unified_crm_note_input={
                "content": "My notes taken during the meeting",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "deal_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timesheetentries"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisTimesheetentries
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timesheetentries.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/actions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingAutomationContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/lists"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.create(x_connection_token="<value>", unified_marketingautomation_list_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/sync/status/{vertical}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: status
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.sync.status(vertical=panora_sdk.PathParamVertical.TICKETING)

            # Use the SDK ...
  - target: $["paths"]["/linked_users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.retrieve(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisTimeoffs
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffs.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/actions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.candidates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/offices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offices.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/taxrates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.taxrates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/linked_users/fromRemoteId"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: remoteId
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.remote_id(remote_id="id_1")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/automations"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.create(x_connection_token="<value>", unified_marketingautomation_automation_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/addresses"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.addresses.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/purchaseorders"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingPurchaseOrder
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.create(x_connection_token="<value>", unified_accounting_purchaseorder_input={
                "status": "Pending",
                "issue_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "purchase_order_number": "PO-001",
                "delivery_date": dateutil.parser.isoparse("2024-07-15T12:00:00Z"),
                "delivery_address": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "customer": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "vendor": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "memo": "Purchase order for Q3 inventory",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "total_amount": 100000,
                "currency": "USD",
                "exchange_rate": "1.2",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "accounting_period_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingTags
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tags.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmDeals
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/field_mappings/attributes"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getFieldMappings
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mappings()

            # Use the SDK ...
  - target: $["paths"]["/hris/dependents"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisDependents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.dependents.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/payrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisPayrollRuns
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.payrollruns.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.interviews.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.benefits.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/templates"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationTemplates
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.create(x_connection_token="<value>", unified_accounting_contact_input={
                "name": "John Doe",
                "is_supplier": True,
                "is_customer": False,
                "email_address": "john.doe@example.com",
                "tax_number": "123456789",
                "status": "Active",
                "currency": "USD",
                "remote_updated_at": "2024-06-15T12:00:00Z",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/expenses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/rag/query"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: query
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.rag.query.query(x_connection_token="<value>", query_body={
                "query": "When does Panora incorporated?",
                "top_k": 3,
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.create(x_connection_token="<value>", unified_ticketing_attachment_input={
                "file_name": "features_planning.pdf",
                "file_url": "https://example.com/features_planning.pdf",
                "uploader": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "comment_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/linked_users/batch"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: importBatch
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.import_batch(request={
                "linked_user_origin_ids": [
                    "id_1",
                ],
                "alias": "acme",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployees
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employees.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ecommerce/products"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listEcommerceProducts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmStage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.stages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsDepartment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.departments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/balancesheets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingBalanceSheet
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.balancesheets.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createWebhookPublic
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.create(request={
                "url": "https://acme.com/webhook_receiver",
                "description": "Webhook to receive connection events",
                "scope": [
                    "connection.created",
                ],
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/projects"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createProject
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.projects.create(request={
                "name": "Project Name",
                "id_organization": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "id_user": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employeepayrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employeepayrollruns.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/automations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/activities"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.activities.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.applications.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/filestorage/files"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/templates"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.create(x_connection_token="<value>", unified_marketingautomation_template_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsCandidate
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.candidates.create(x_connection_token="<value>", unified_ats_candidate_input={
                "first_name": "Joe",
                "last_name": "Doe",
                "company": "Acme",
                "title": "Analyst",
                "locations": "New York",
                "is_private": False,
                "email_reachable": True,
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_modified_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "last_interaction_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "applications": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "tags": [
                    "tag_1",
                    "tag_2",
                ],
                "urls": [
                    {
                        "url": "mywebsite.com",
                        "url_type": "WEBSITE",
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "+33660688899",
                        "phone_type": "WORK",
                    },
                ],
                "email_addresses": [
                    {
                        "email_address": "joedoe@gmail.com",
                        "email_address_type": "WORK",
                    },
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: delete
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.delete(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/scorecards/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.scorecards.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/purchaseorders"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/bankinfos"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisBankInfo
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.bankinfos.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/timeoffbalances/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisTimeoffbalance
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffbalances.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingAutomationUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/expenses"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingExpense
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.create(x_connection_token="<value>", unified_accounting_expense_input={
                "transaction_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "total_amount": 10000,
                "sub_total": 9000,
                "total_tax_amount": 1000,
                "currency": "USD",
                "exchange_rate": "1.2",
                "memo": "Business lunch with client",
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/incomestatements"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.incomestatements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.create(x_connection_token="<value>", unified_crm_task_input={
                "subject": "Answer customers",
                "content": "Prepare email campaign",
                "status": "PENDING",
                "due_date": "2024-10-01T12:00:00Z",
                "finished_date": "2024-10-01T12:00:00Z",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "deal_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingAutomationUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/rejectreasons"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsRejectReasons
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.rejectreasons.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/balancesheets"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingBalanceSheets
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.balancesheets.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/filestorage/files"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.create(x_connection_token="<value>", unified_filestorage_file_input={
                "name": "my_paris_photo.png",
                "file_url": "https://example.com/my_paris_photo.png",
                "mime_type": "application/pdf",
                "size": "1024",
                "folder_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "permission": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "shared_link": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobs.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ecommerce/products/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveEcommerceProduct
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ecommerce/customers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveEcommerceCustomer
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.customers.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsTag
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.tags.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/items"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.items.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/field_mappings/define"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: definitions
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.definitions(request={
                "object_type_owner": panora_sdk.ObjectTypeOwner.COMPANY,
                "name": "fav_dish",
                "description": "My favorite dish",
                "data_type": panora_sdk.DataType.STRING,
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ecommerce/customers"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listEcommerceCustomers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.customers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.scorecards.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/employeepayrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employeepayrollruns.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ecommerce/fulfillments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveEcommerceFulfillment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.fulfillments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisTimeoff
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffs.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/folders"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createTicketingTicket
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.create(x_connection_token="<value>", unified_ticketing_ticket_input={
                "name": "Customer Service Inquiry",
                "status": "OPEN",
                "description": "Help customer",
                "due_date": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "type": "BUG",
                "parent_ticket": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "collections": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "tags": [
                    "my_tag",
                    "urgent_tag",
                ],
                "completed_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "priority": "HIGH",
                "assigned_to": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "comment": {
                    "body": "Assigned to Eric !",
                    "html_body": "<p>Assigned to Eric !</p>",
                    "is_private": False,
                    "creator_type": "USER",
                    "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "attachments": [
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    ],
                },
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/paygroups"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisPaygroups
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.paygroups.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/campaigns"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.create(x_connection_token="<value>", unified_marketingautomation_campaign_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmStages
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.stages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/automations"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationAutomations
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ecommerce/orders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveEcommerceOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/paygroups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisPaygroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.paygroups.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobinterviewstages"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobinterviewstages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/accounts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.create(x_connection_token="<value>", unified_accounting_account_input={
                "name": "Cash",
                "description": "Main cash account for daily operations",
                "classification": "Asset",
                "type": "Current Asset",
                "status": "Active",
                "current_balance": 10000,
                "currency": "USD",
                "account_number": "1000",
                "parent_account": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/journalentries"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingJournalEntry
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.create(x_connection_token="<value>", unified_accounting_journalentry_input={
                "transaction_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "payments": [
                    "payment1",
                    "payment2",
                ],
                "applied_payments": [
                    "appliedPayment1",
                    "appliedPayment2",
                ],
                "memo": "Monthly expense journal entry",
                "currency": "USD",
                "exchange_rate": "1.2",
                "id_acc_company_info": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "journal_number": "JE-001",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "id_acc_accounting_period": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "posting_status": "Posted",
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/payrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisPayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.payrollruns.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/rejectreasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsRejectReason
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.rejectreasons.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/creditnotes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.creditnotes.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/expenses"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/payments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ecommerce/products"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createEcommerceProduct
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.create(x_connection_token="<value>", unified_ecommerce_product_input={
                "product_url": "https://product_url/tee",
                "product_type": "teeshirt",
                "product_status": "ACTIVE",
                "images_urls": [
                    "https://myproduct/image",
                ],
                "description": "best tee ever",
                "vendor": "vendor_extern",
                "variants": [
                    {},
                ],
                "tags": [
                    "tag_1",
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/vendorcredits"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.vendorcredits.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingComments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/linked_users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listLinkedUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.list()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/projects"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getProjects
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.projects.get_projects()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffbalances"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisTimeoffbalances
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffbalances.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/lists"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationLists
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/journalentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/taxrates"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.taxrates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createHrisEmployee
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employees.create(x_connection_token="<value>", unified_hris_employee_input={
                "groups": [
                    "Group1",
                    "Group2",
                ],
                "locations": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "employee_number": "EMP001",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "first_name": "John",
                "last_name": "Doe",
                "preferred_name": "Johnny",
                "display_full_name": "John Doe",
                "username": "johndoe",
                "work_email": "john.doe@company.com",
                "personal_email": "john.doe@personal.com",
                "mobile_phone_number": "+1234567890",
                "employments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "ssn": "123-45-6789",
                "gender": "MALE",
                "ethnicity": "AMERICAN_INDIAN_OR_ALASKA_NATIVE",
                "marital_status": "Married",
                "date_of_birth": dateutil.parser.isoparse("1990-01-01"),
                "start_date": dateutil.parser.isoparse("2020-01-01"),
                "employment_status": "ACTIVE",
                "termination_date": dateutil.parser.isoparse("2025-01-01"),
                "avatar_url": "https://example.com/avatar.jpg",
                "manager_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.groups.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.applications.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/field_mappings/map"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: map
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.map(request={
                "attribute_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "source_custom_field_id": "id_1",
                "source_provider": "hubspot",
                "linked_user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.candidates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.groups.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listWebhooks
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.list()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingTeam
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.teams.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/offices"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offices.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/invoices"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingInvoice
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.create(x_connection_token="<value>", unified_accounting_invoice_input={
                "type": "Sales",
                "number": "INV-001",
                "issue_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "due_date": dateutil.parser.isoparse("2024-07-15T12:00:00Z"),
                "paid_on_date": dateutil.parser.isoparse("2024-07-10T12:00:00Z"),
                "memo": "Payment for services rendered",
                "currency": "USD",
                "exchange_rate": "1.2",
                "total_discount": 1000,
                "sub_total": 10000,
                "status": "Paid",
                "total_tax_amount": 1000,
                "total_amount": 11000,
                "balance": 0,
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "accounting_period_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/journalentries"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/transactions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.transactions.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/field_mappings"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: defineCustomField
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.define_custom_field(request={
                "object_type_owner": panora_sdk.CustomFieldCreateDtoObjectTypeOwner.COMPANY,
                "name": "my_favorite_dish",
                "description": "Favorite Dish",
                "data_type": panora_sdk.CustomFieldCreateDtoDataType.STRING,
                "source_custom_field_id": "id_1",
                "source_provider": "hubspot",
                "linked_user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/files/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.companies.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffs"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createHrisTimeoff
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffs.create(x_connection_token="<value>", unified_hris_timeoff_input={
                "employee": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "approver": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "status": "REQUESTED",
                "employee_note": "Annual vacation",
                "units": "DAYS",
                "amount": 5,
                "request_type": "VACATION",
                "start_time": dateutil.parser.isoparse("2024-07-01T09:00:00Z"),
                "end_time": dateutil.parser.isoparse("2024-07-05T17:00:00Z"),
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/phonenumbers"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.phonenumbers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.create(x_connection_token="<value>", unified_crm_company_input={
                "name": "Acme",
                "industry": "ACCOUNTING",
                "number_of_employees": 10,
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "email_addresses": [
                    {
                        "email_address": "acme@gmail.com",
                        "email_address_type": "WORK",
                    },
                ],
                "addresses": [
                    {
                        "street_1": "5th Avenue",
                        "street_2": "Street 2",
                        "city": "New York",
                        "state": "NY",
                        "postal_code": "10001",
                        "country": "USA",
                        "address_type": "WORK",
                        "owner_type": "<value>",
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "+33660606067",
                        "phone_type": "WORK",
                    },
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.eeocs.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/payments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsApplication
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.applications.create(x_connection_token="<value>", unified_ats_application_input={
                "applied_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "rejected_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "offers": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "12345678-1234-1234-1234-123456789012",
                ],
                "source": "Source Name",
                "credited_to": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "current_stage": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "reject_reason": "Candidate not experienced enough",
                "candidate_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "job_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/cashflowstatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.cashflowstatements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ecommerce/fulfillments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listEcommerceFulfillments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.fulfillments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: health
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.health()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/field_mappings/entities"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getFieldMappingsEntities
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mappings_entities()

            # Use the SDK ...
  - target: $["paths"]["/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisLocation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.locations.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/connections"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listConnections
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.connections.list()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/tags"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsTags
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.tags.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/transactions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.transactions.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/timesheetentries"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createHrisTimesheetentry
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timesheetentries.create(x_connection_token="<value>", unified_hris_timesheet_entry_input={
                "hours_worked": 40,
                "start_time": dateutil.parser.isoparse("2024-10-01T08:00:00Z"),
                "end_time": dateutil.parser.isoparse("2024-10-01T16:00:00Z"),
                "employee_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "remote_was_deleted": False,
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmEngagement
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.create(x_connection_token="<value>", unified_crm_engagement_input={
                "content": "Meeting call with CTO",
                "direction": "INBOUND",
                "subject": "Technical features planning",
                "start_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "end_time": dateutil.parser.isoparse("2024-10-01T22:00:00Z"),
                "type": "MEETING",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contacts": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/addresses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.addresses.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.create(x_connection_token="<value>", unified_accounting_attachment_input={
                "file_name": "invoice.pdf",
                "file_url": "https://example.com/files/invoice.pdf",
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/purchaseorders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/field_mappings/values"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getFieldMappingValues
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mapping_values()

            # Use the SDK ...
  - target: $["paths"]["/ats/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offers.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/folders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingTag
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tags.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisCompanies
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.companies.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/actions"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.create(x_connection_token="<value>", unified_marketingautomation_action_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingAccounts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/invoices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.create(x_connection_token="<value>", unified_crm_contact_input={
                "first_name": "John",
                "last_name": "Doe",
                "email_addresses": [
                    {
                        "email_address": "Jena.Nienow28@yahoo.com",
                        "email_address_type": "<value>",
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "<value>",
                        "phone_type": "<value>",
                    },
                ],
                "addresses": [
                    {
                        "street_1": "5th Avenue",
                        "street_2": "Street 2",
                        "city": "Anytown",
                        "state": "CA",
                        "postal_code": "10001",
                        "country": "USA",
                        "address_type": "PERSONAL",
                        "owner_type": "<value>",
                    },
                ],
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmEngagement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/templates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobs.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/cashflowstatements"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.cashflowstatements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/auth/login"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: signIn
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.auth.login.sign_in(request={
                "email": "Oda.Treutel97@hotmail.com",
                "password_hash": "<value>",
            })

            # Use the SDK ...
  - target: $["paths"]["/events"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPanoraCoreEvents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.events.get_panora_core_events()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/dependents/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisDependent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.dependents.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employerbenefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployerBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employerbenefits.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.interviews.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.eeocs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: hello
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hello()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks/verifyEvent"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: verifyEvent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.verify_event(request={
                "payload": {
                    "key": "<value>",
                },
                "signature": "<value>",
                "secret": "<value>",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/items/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.items.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ecommerce/orders"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createEcommerceOrder
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.create(x_connection_token="<value>", unified_ecommerce_order_input={
                "order_status": "UNSHIPPED",
                "order_number": "19823838833",
                "payment_status": "SUCCESS",
                "currency": "AUD",
                "total_price": 300,
                "total_discount": 10,
                "total_shipping": 120,
                "total_tax": 120,
                "fulfillment_status": "PENDING",
                "customer_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "12345",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCollection
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.collections.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/passthrough"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: request
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.passthrough.request(x_connection_token="<value>", pass_through_request_dto={
                "method": panora_sdk.PassThroughRequestDtoMethod.GET,
                "path": "/dev",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/bankinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisBankInfo
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.bankinfos.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/messages"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationMessages
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.messages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/ats/activities/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.activities.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobinterviewstages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobinterviewstages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.accounts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisBenefits
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.benefits.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/marketingautomation/events"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingAutomationEvents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.events.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/incomestatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.incomestatements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationCampaigns
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
  - target: $["paths"]["/accounting/payments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingPayment
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.create(x_connection_token="<value>", unified_accounting_payment_input={
                "invoice_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "transaction_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "currency": "USD",
                "exchange_rate": "1.2",
                "total_amount": 10000,
                "type": "Credit Card",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "accounting_period_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
