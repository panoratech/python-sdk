overlay: 1.0.0
info:
  title: CodeSamples overlay for python target
  version: 0.0.0
actions:
  - target: $["paths"]["/ats/rejectreasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsRejectReason
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.rejectreasons.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/folders"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.folders.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.attachments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/actions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.actions.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/messages"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationMessages
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.messages.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/actions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.actions.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/automations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.automations.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.eeocs.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/linked_users/fromRemoteId"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: remoteId
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.fromremoteid.remote_id(remote_id="<value>")

            # Use the SDK ...
  - target: $["paths"]["/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.groups.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisLocation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.locations.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingAutomationUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobs.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/field_mappings/map"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: map
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.field_mappings.map.map(request={
                "attribute_id": "<value>",
                "source_custom_field_id": "<value>",
                "source_provider": "<value>",
                "linked_user_id": "<value>",
            })

            # Use the SDK ...
  - target: $["paths"]["/accounting/cashflowstatements"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.cashflowstatements.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.notes.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employees.create(x_connection_token="<value>", unified_hris_employee_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks/verifyEvent"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: verifyEvent
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.verifyevent.verify_event(request={
                "payload": {},
                "signature": "<value>",
                "secret": "<value>",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/automations"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.automations.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/expenses"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.expenses.create(x_connection_token="<value>", unified_accounting_expense_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/invoices"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.invoices.create(x_connection_token="<value>", unified_accounting_invoice_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/paygroups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisPaygroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.paygroups.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisTimeoffs
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffs.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/emails/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationEmail
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.emails.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.contacts.create(x_connection_token="<value>", unified_accounting_contact_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingTag
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tags.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employeepayrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employeepayrollruns.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/automations"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.automations.create(x_connection_token="<value>", unified_marketingautomation_automation_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/files"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.files.create(x_connection_token="<value>", remote_data=False, unified_filestorage_file_input={
                "name": "<value>",
                "file_url": "<value>",
                "mime_type": "<value>",
                "size": "<value>",
                "folder_id": "<value>",
                "permission": "<value>",
                "shared_link": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/bankinfos"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisBankinfo
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.bankinfos.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/journalentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.journalentries.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/bankinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisBankinfo
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.bankinfos.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/dependents"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisDependents
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.dependents.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.candidates.create(x_connection_token="<value>", unified_ats_candidate_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisTimeoff
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/items/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.items.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/payments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.payments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.applications.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.attachments.create(x_connection_token="<value>", unified_ats_attachment_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/companyinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingCompanyInfo
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.companyinfos.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/creditnotes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.creditnotes.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tickets.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.benefits.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/payments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.payments.create(x_connection_token="<value>", unified_accounting_payment_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobinterviewstages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobinterviewstages.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/purchaseorders"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.purchaseorders.create(x_connection_token="<value>", unified_accounting_purchaseorder_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/sync/resync"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: resync
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.sync.resync()

            # Use the SDK ...
  - target: $["paths"]["/hris/dependents/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisDependent
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.dependents.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/balancesheets"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingBalanceSheets
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.balancesheets.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/payments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.payments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/drives"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageDrives
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.drives.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.attachments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/activities"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.activities.create(x_connection_token="<value>", unified_ats_activity_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: hello
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hello()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingTeams
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.teams.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/items"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.items.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.contacts.create(x_connection_token="<value>", unified_marketingautomation_contact_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/activities/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.activities.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingTags
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tags.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmEngagement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.engagements.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/messages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationMessage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.messages.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.accounts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmEngagement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.engagements.create(x_connection_token="<value>", unified_crm_engagement_input={
                "type": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employerbenefits"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployerBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employerbenefits.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffs"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createHrisTimeoff
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffs.create(x_connection_token="<value>", unified_hris_timeoff_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/folders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.folders.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.lists.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.applications.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.interviews.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employees.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employerbenefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployerBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employerbenefits.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingAccounts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.accounts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/emails"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationEmails
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.emails.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCollection
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.collections.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.comments.create(x_connection_token="<value>", unified_ticketing_comment_input={
                "body": "<value>",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.attachments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/invoices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.invoices.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/vendorcredits"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.vendorcredits.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.attachments.create(x_connection_token="<value>", unified_ticketing_attachment_input={
                "file_name": "your_file_here",
                "file_url": "<value>",
                "uploader": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmStage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.stages.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.attachments.create(x_connection_token="<value>", unified_accounting_attachment_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/files/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.files.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.interviews.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tickets.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/field_mappings/define"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: definitions
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.field_mappings.define.definitions(request={
                "object_type_owner": "<value>",
                "name": "<value>",
                "description": "Universal heuristic matrices",
                "data_type": "decimal",
            })

            # Use the SDK ...
  - target: $["paths"]["/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/linked_users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listLinkedUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.list()

            # Use the SDK ...
  - target: $["paths"]["/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.applications.create(x_connection_token="<value>", unified_ats_application_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobinterviewstages"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobinterviewstages.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.companies.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.deals.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.tasks.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/purchaseorders"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.purchaseorders.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisCompanys
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.companies.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisLocation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.locations.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffbalances"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisTimeoffbalance
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffbalances.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.contacts.create(x_connection_token="<value>", unified_crm_contact_input={
                "first_name": "Jed",
                "last_name": "Kuhn",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/journalentries"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.journalentries.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/passthrough"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: request
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora()


            res = s.passthrough.request(integration_id="<value>", linked_user_id="<value>", vertical="<value>", pass_through_request_dto={
                "method": panora_sdk.Method.GET,
                "path": "/dev",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/expenses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.expenses.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/creditnotes"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.creditnotes.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/taxrates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.taxrates.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.deals.create(x_connection_token="<value>", unified_crm_deal_input={
                "name": "<value>",
                "description": "Multi-tiered human-resource model",
                "amount": 8592.13,
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.notes.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingAutomationUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.accounts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/sync/status/{vertical}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: status
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.sync.status(vertical="<value>")

            # Use the SDK ...
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.eeocs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.campaigns.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/scorecards/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.scorecards.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingCollections
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.collections.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.groups.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/companyinfos"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingCompanyInfos
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.companyinfos.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/trackingcategories"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingTrackingCategorys
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.trackingcategories.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/linked_users"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.create(request={
                "linked_user_origin_id": "<value>",
                "alias": "<value>",
            })

            # Use the SDK ...
  - target: $["paths"]["/accounting/transactions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.transactions.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.tasks.create(x_connection_token="<value>", unified_crm_task_input={
                "subject": "<value>",
                "content": "<value>",
                "status": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.scorecards.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/transactions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.transactions.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.campaigns.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/templates"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationTemplates
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.templates.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/accounts"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.accounts.create(x_connection_token="<value>", unified_accounting_account_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/purchaseorders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.purchaseorders.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmEngagements
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.engagements.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/rejectreasons"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsRejectReasons
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.rejectreasons.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/addresses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.addresses.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/linked_users/single"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.single.retrieve(id="<value>")

            # Use the SDK ...
  - target: $["paths"]["/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employees.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offers.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingComments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.comments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.companies.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/linked_users/batch"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: importBatch
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.batch.import_batch(request={
                "linked_user_origin_ids": [
                    "<value>",
                ],
                "alias": "<value>",
            })

            # Use the SDK ...
  - target: $["paths"]["/hris/paygroups"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisPaygroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.paygroups.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.attachments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/drives/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageDrive
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.drives.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingTeam
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.teams.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/cashflowstatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.cashflowstatements.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/groups"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.groups.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmDeals
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.deals.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/tags"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsTags
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.tags.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/field_mappings"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: defineCustomField
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.field_mappings.define_custom_field(request={
                "object_type_owner": "<value>",
                "name": "<value>",
                "description": "Balanced multimedia policy",
                "data_type": "point",
                "source_custom_field_id": "<value>",
                "source_provider": "<value>",
                "linked_user_id": "<value>",
            })

            # Use the SDK ...
  - target: $["paths"]["/marketingautomation/lists"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.lists.create(x_connection_token="<value>", unified_marketingautomation_list_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsDepartment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.departments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/interviews"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.interviews.create(x_connection_token="<value>", unified_ats_interview_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveCrmUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/offices"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offices.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/incomestatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.incomestatements.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/vendorcredits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.vendorcredits.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/incomestatements"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.incomestatements.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/folders"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.folders.create(x_connection_token="<value>", remote_data=False, unified_filestorage_folder_input={
                "name": "<value>",
                "size": "<value>",
                "folder_url": "<value>",
                "description": "Multi-tiered human-resource model",
                "drive_id": "<value>",
                "parent_folder_id": "<value>",
                "shared_link": "<value>",
                "permission": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveFilestorageUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/events"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingAutomationEvents
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.events.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/phonenumbers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.phonenumbers.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listWebhooks
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.list()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/events/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationEvent
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.events.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsTag
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.tags.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/addresses"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.addresses.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.comments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.attachments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: health
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.health()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/offices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offices.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.candidates.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/invoices"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.invoices.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateStatus
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.id.update_status(id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/journalentries"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.journalentries.create(x_connection_token="<value>", unified_accounting_journalentry_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.candidates.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: delete
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.id.delete(id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tickets.create(x_connection_token="<value>", unified_ticketing_ticket_input={
                "name": "<value>",
                "description": "Multi-tiered human-resource model",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/employeepayrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employeepayrollruns.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/actions"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.actions.create(x_connection_token="<value>", unified_marketingautomation_action_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsDepartments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.departments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/taxrates"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.taxrates.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.notes.create(x_connection_token="<value>", unified_crm_note_input={
                "content": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/campaigns"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.campaigns.create(x_connection_token="<value>", unified_marketingautomation_campaign_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.benefits.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingAutomationContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/filestorage/files"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.files.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/timeoffbalances/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveHrisTimeoffbalance
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffbalances.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/templates"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.templates.create(x_connection_token="<value>", unified_marketingautomation_template_input={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.tasks.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/lists"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listMarketingautomationLists
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.lists.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/payrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisPayrollRuns
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.payrollruns.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/activities"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.activities.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/expenses"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.expenses.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/phonenumbers"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.phonenumbers.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/trackingcategories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingTrackingCategory
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.trackingcategories.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.companies.create(x_connection_token="<value>", unified_crm_company_input={
                "name": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listHrisGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.groups.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/marketingautomation/templates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.templates.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAtsUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/accounting/balancesheets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: retrieveAccountingBalanceSheet
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.balancesheets.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listCrmStages
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.stages.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offers.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhooks"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createWebhookPublic
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.create(request={
                "url": "http://limp-pastry.org",
                "scope": [
                    "<value>",
                ],
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.attachments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: listTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.accounts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
