"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .unifiedticketingcommentoutput import UnifiedTicketingCommentOutput, UnifiedTicketingCommentOutputTypedDict
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, HeaderMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class RetrieveTicketingCommentRequestTypedDict(TypedDict):
    x_connection_token: str
    r"""The connection token"""
    id: str
    r"""id of the `comment` you want to retrive."""
    remote_data: NotRequired[bool]
    r"""Set to true to include data from the original Ticketing software."""
    

class RetrieveTicketingCommentRequest(BaseModel):
    x_connection_token: Annotated[str, pydantic.Field(alias="x-connection-token"), FieldMetadata(header=HeaderMetadata(style="simple", explode=False))]
    r"""The connection token"""
    id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""id of the `comment` you want to retrive."""
    remote_data: Annotated[Optional[bool], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Set to true to include data from the original Ticketing software."""
    

class RetrieveTicketingCommentResponseBodyTypedDict(TypedDict):
    prev_cursor: str
    next_cursor: str
    data: List[UnifiedTicketingCommentOutputTypedDict]
    

class RetrieveTicketingCommentResponseBody(BaseModel):
    prev_cursor: str
    next_cursor: str
    data: List[UnifiedTicketingCommentOutput]
    
